Клас TreapNode:

__init__(self, key, priority): Конструктор класу TreapNode. Ініціалізує новий об'єкт вузла декартового дерева з заданим ключем (key) і пріоритетом (priority). Встановлює значення лівого і правого піддерева на None.
Клас Treap:

__init__(self): Конструктор класу Treap. Ініціалізує новий об'єкт декартового дерева з коренем (root), який початково встановлюється на None.
insert(self, key): Вставляє нове значення (key) у декартове дерево. Генерує випадковий пріоритет для нового вузла та викликає приватний метод _insert для вставки значення у дерево.
_insert(self, node, key, priority): Вставляє новий вузол з ключем (key) і пріоритетом (priority) у заданий вузол (node) декартового дерева. Рекурсивно обходить дерево, перевіряє, в який піддереві треба вставити новий вузол, та здійснює обертання вправо (_rotate_right) або вліво (_rotate_left), якщо необхідно.
delete(self, key): Видаляє вузол з декартового дерева за вказаним ключем (key). Викликає приватний метод _delete для видалення вузла з дерева.
_delete(self, node, key): Видаляє вузол з декартового дерева за вказаним ключем (key) у заданому вузлі (node). Рекурсивно обходить дерево, знаходить вузол з вказаним ключем і здійснює обертання вправо або вліво, якщо пріоритети вузлів не забезпечують умову декартового дерева.
_rotate_right(self, node): Виконує праве обертання для заданого вузла (node). Переміщує ліве піддерево вузла на місце правого піддерева, а потім вузол самого лівого піддерева стає новим коренем.
_rotate_left(self, node): Виконує ліве обертання для заданого вузла (node). Переміщує праве піддерево вузла на місце лівого піддерева, а потім вузол самого правого піддерева стає новим коренем.
search(self, key): Здійснює пошук вузла з заданим ключем (key) у декартовому дереві. Викликає приватний метод _search для пошуку вузла.
_search(self, node, key): Здійснює рекурсивний пошук вузла з заданим ключем (key) у заданому вузлі (node) декартового дерева. Перевіряє ключ поточного вузла, а потім рекурсивно переходить до лівого або правого піддерева залежно від значення ключа.
Будь ласка, зверніть увагу, що у цій реалізації ми використовуємо модуль random для генерації випадкових пріоритетів. Це допомагає зберігати властивості декартового дерева із ймовірністю. Ключовий пріоритет визначає порядок вузлів у дереві, а ключі визначають значення вузлів.